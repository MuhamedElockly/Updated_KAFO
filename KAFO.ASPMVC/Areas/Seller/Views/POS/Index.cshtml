@model Invoice
@{
    ViewData["Title"] = "نقطة البيع";
    Layout = "_Layout";
    var e = ViewData.ModelState.IsValid;
    List<string> invoiceTypes = ["فاتورة نقدي", "فاتورة اجل"]; //, "فاتورة مرتجع نقدي", "فاتورة مرتجع اجل"
    // SelectList selectListItems = new SelectList(invoiceTypes);
}
<link rel="stylesheet" href="~/css/POS.css" asp-append-version="true" />

<form asp-controller="Invoice" asp-action="Create" asp-route-dist="pos" method="post" id="invoiceForm">
    <div class="row id="main-flex">
        <!-- Products Section -->
        <div class="product-list col-lg-8 d-flex flex-column">
            <label asp-for="Type" class="form-label fw-bold">نوع الفاتورة</label>
            <div class="row">
                <!-- Invoice Type Selection -->
                <div class="mb-2 col-6">

                    <select asp-for="Type" class="form-select" id="InvoiceTypeSelect">
                        @for (int i = 0 ; i < invoiceTypes.Count ; i++)
                        {
                            <option value="@i">@invoiceTypes[i]</option>
                        }
                    </select>
                </div>
                <!-- Search Bar -->
                <div class="search-container  col-6">
                    <div class="position-relative">
                        <input type="text" class="form-control search-input" placeholder="البحث عن المنتجات..." id="searchInput">
                    </div>
                </div>
                <div id="customerSelect" style="display: none;" class="mb-2 col-12">
                    <span asp-validation-for="Type" class="mt-2 text-danger"></span>
                    <select asp-for="CustomerAccountId" class="mt-2 form-select col-12" id="customerSelectV">
                        <option value="">اختر العميل</option>
                        @if (ViewBag.Customers != null)
                        {
                            foreach (var customer in (List<KAFO.Domain.Users.CustomerAccount>) ViewBag.Customers)
                            {
                                <option value="@customer.Id">@customer.CustomerName</option>
                            }
                        }
                    </select>
                </div>

            </div>

            <!-- Category Pills -->
            <div class="category-pills">
                <div>
                    <button type="button" class="category-pill" onclick="filterProducts('all', this)">
                        <i class="fas fa-th-large me-1"></i>
                        الكل
                    </button>
                    @foreach (Category cat in ViewBag.Cats)
                    {
                        <button type="button" class="category-pill" onclick="filterProducts('@cat.Name', this)">
                            @cat.Name
                        </button>
                    }
                </div>
            </div>

            <!-- Products Grid -->
            <div class="products-grid">
                <h6 class="mb-3 fw-bold text-secondary">
                    <i class="fas fa-shopping-bag me-2"></i>
                    المنتجات
                </h6>
                <div class="products-scroll-wrapper flex-grow-1 overflow-auto">
                    <div class="row flex-nowrap flex-md-wrap" id="productsList">
                        @if (ViewBag.Products != null)
                        {
                            <div class="products-grid-container">
                                @foreach (var product in ViewBag.Products)
                                {
                                    <div class="product-grid-item" data-category="@product.Category.Name">
                                        <div class="product-card position-relative" onclick="addToCart(@product.Id, '@product.Name', @product.SellingPrice, '@product.ImageUrl')">
                                            <div class="ImgContainer">
                                                <img src="@product.ImageUrl" class="product-image" alt="@product.Name">
                                            </div>
                                            <div class="product-info">
                                                <h6 class="product-title">@product.Name</h6>
                                                <div class="d-flex align-items-center justify-content-between">
                                                    <div>
                                                        <span class="product-price">@product.SellingPrice.ToString("N2") ج.م</span>
                                                    </div>
                                                    <div>
                                                        <span class="product-price">متبقي @product.StockQuantity قطع</span>
                                                    </div>
                                                </div>
                                                <button type="button" class="add-to-cart-btn" onclick="event.stopPropagation(); addToCart(@product.Id, '@product.Name', @product.SellingPrice, '@product.ImageUrl')">
                                                    <i class="fas fa-cart-plus me-1"></i>
                                                    إضافة للسلة
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!-- Cart Section -->
        <div class="col-lg-4 h-100 d-flex flex-column">
            <span class="EmptyCart text-danger"></span>
            <!-- Barcode Scan Input (Desktop Only) -->
            <div class="barcode-scan-container d-none d-lg-block mb-3">
                <input type="text" id="barcodeScanInput" class="form-control barcode-scan-input" placeholder="امسح الباركود هنا..." autocomplete="off" autofocus onkeydown="if(event.key==='Enter'){ event.preventDefault(); if(this.value.trim()){ handleBarcodeScan(this.value); this.value=''; } this.focus(); }">
                @* <input type="text" *@
                @*        id="barcodeScanInput" *@
                @*        class="form-control barcode-scan-input" *@
                @*        placeholder="امسح الباركود هنا..." *@
                @*        autocomplete="off" *@
                @*        autofocus *@
                @*        oninput="if(this.value.trim()){ handleBarcodeScan(this.value); this.value=''; this.focus(); }"> *@

            </div>
            <!-- Barcode Scan Input (Mobile Only) -->
            <div class="barcode-scan-container d-block d-lg-none mb-3">
                <input type="text" id="barcodeScanInputMobile" class="form-control barcode-scan-input" placeholder="امسح الباركود هنا..." autocomplete="off" onkeydown="if(event.key==='Enter'){ event.preventDefault(); if(this.value.trim()){ handleBarcodeScan(this.value); this.value=''; } this.focus(); }">
            </div>
            <div class="cart-container flex-grow-1 d-flex flex-column">
                <div class="cart-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-shopping-cart me-2"></i>
                            سلة المشتريات
                        </h5>
                        <span class="badge bg-light text-dark" id="cartItemsCount">0</span>
                    </div>
                </div>
                <div class="cart-items flex-grow-1 overflow-auto" id="cartItems">
                    <div class="text-center text-muted py-5" id="emptyCartMessage">
                        <i class="fas fa-shopping-cart fa-3x mb-3 opacity-50"></i>
                        <p>سلة المشتريات فارغة</p>
                        <small>اختر المنتجات لإضافتها إلى السلة</small>
                    </div>
                </div>
                <!-- Hidden inputs for invoice items -->
                <div id="invoiceItemsInputs"></div>
                <div class="cart-summary mt-auto">
                    <div class="summary-row">
                        <span>المجموع الكلي:</span>
                        <span id="total">0.00 ج.م</span>
                    </div>
                    <input type="hidden" asp-for="TotalInvoice" id="totalInvoiceInput" />
                    <div class="action-buttons">
                        <button type="button" class="action-btn btn-cancel" onclick="clearCart()">
                            <i class="fas fa-times-circle"></i>
                            إلغاء
                        </button>
                        <button type="submit" class="action-btn btn-charge" id="processPaymentBtn">
                            <i class="fas fa-credit-card"></i>
                            دفع
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<!-- Custom Alert Modal -->
<div class="modal fade" id="alertModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="border-radius: var(--border-radius); border: none; box-shadow: var(--box-shadow-lg);">
            <div class="modal-body text-center p-4">
                <div class="mb-3" id="alertIcon">
                    <i class="fas fa-exclamation-circle fa-4x text-warning"></i>
                </div>
                <h4 class="mb-3" id="alertTitle">تنبيه</h4>
                <p class="text-muted mb-4" id="alertMessage"></p>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="alertConfirmBtn">
                    <i class="fas fa-check me-2"></i>
                    موافق
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <!-- SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function FocusBarcodeScan()
        {
            var barcodeInput = $('#barcodeScanInput');
            if (barcodeInput.length) {
                barcodeInput.focus();
                // Remove blur refocus handler
            }
            barcodeInput.val(''); // Clear the input text

        }
        // Barcode scan handler (desktop only)
        function handleBarcodeScan(barcode) {
            debugger
            if (!window.allProductsByBarcode) {
                // Build a JS map of barcode -> product from ViewBag.Products
                window.allProductsByBarcode = {};
        @if (ViewBag.Products != null)
        {
            foreach (var product in ViewBag.Products)
            {
                if (!string.IsNullOrEmpty(product.Barcode))
                {
                    <text>window.allProductsByBarcode['@product.Barcode'] = { id: @product.Id, name: '@product.Name', price: @product.SellingPrice, image: '@product.ImageUrl' };</text>
                }
            }
        }
            }
            var p = window.allProductsByBarcode[barcode];
            if (p) {
                FocusBarcodeScan();
                addToCart(p.id, p.name, p.price, p.image);
            } else {
                        Swal.fire({
          title: 'تنبيه',
          text: 'لم يتم العثور على منتج بهذا الباركود',
          icon: 'warning',
                allowOutsideClick: true,
        allowEscapeKey: true,
        allowEnterKey: true,
        showConfirmButton: true, // Hide OK button if you just want it to auto-close
        timer: 2000 // No auto-close unless user interacts
        }).then(() => {
          FocusBarcodeScan();
        });
            }

        }
        // Remove forced refocus logic so user can focus other components
        $(document).ready(function() {
            FocusBarcodeScan();
        });
        // Update quantity function with zero check
        function updateQuantity(id, change) {
            debugger
            const item = cart.find(item => item.id === id);
            if (item) {
                 addToCart(item.id,item.name,item.price,item.image,change);


                if (item.quantity <= 0) {
                    removeFromCart(id);
                } else {
                    updateCartDisplay();
                    updateInvoiceItemsInputs();
                }
            }
        }

                // Show beautiful alert
        function showAlert(title, message, type = 'warning') {
            const modal = $('#alertModal');
            const iconMap = {
                'warning': 'exclamation-circle',
                'error': 'times-circle',
                'success': 'check-circle',
                'info': 'info-circle'
            };
            const colorMap = {
                'warning': 'warning',
                'error': 'danger',
                'success': 'success',
                'info': 'primary'
            };

            $('#alertTitle').text(title);
            $('#alertMessage').text(message);
            $('#alertIcon').html(`<i class="fas fa-${iconMap[type]} fa-4x text-${colorMap[type]}"></i>`);

            // Remove any existing click handlers
            $('#alertConfirmBtn').off('click');

            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();
        }

        // Show beautiful confirm dialog
        function showConfirm(title, message, confirmCallback, type = 'warning') {
            const modal = $('#alertModal');
            const iconMap = {
                'warning': 'exclamation-triangle',
                'error': 'times-circle',
                'success': 'check-circle',
                'info': 'question-circle'
            };
            const colorMap = {
                'warning': 'warning',
                'error': 'danger',
                'success': 'success',
                'info': 'primary'
            };

            $('#alertTitle').text(title);
            $('#alertMessage').text(message);
            $('#alertIcon').html(`<i class="fas fa-${iconMap[type]} fa-4x text-${colorMap[type]}"></i>`);

            // Remove any existing click handlers
            $('#alertConfirmBtn').off('click');

            // Add new click handler
            $('#alertConfirmBtn').on('click', function() {
                confirmCallback();
            });

            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();
        }
        // Cart functionality
        let cart = [];
        let cartTotal = 0;

        $(document).ready(function() {
        @if (!ViewData.ModelState.IsValid)
        {
            <text>
                            $('#alertModal').modal('show');
            </text>
        }
            // Handle form submission to prevent empty cart
            $('form').submit(function(e) {
                debugger
                if (cart.length === 0) {
                    e.preventDefault();
        e.stopImmediatePropagation(); // Prevents other submit handlers from executing
                    // $('.EmptyCart').text('لا يمكن تقديم الفاتورة بدون أي منتجات في السلة');
                    showAlert('تنبيه', 'لا يمكن تقديم الفاتورة بدون أي منتجات في السلة', 'warning');
                    return false;
                }
                        if($('#InvoiceTypeSelect').val() === "1" && $('#customerSelectV').val() === ''){
            e.preventDefault();
        e.stopImmediatePropagation();
                            showAlert('تنبيه', 'برجاء اختيار العميل', 'warning');
            return false;
        }
            });

            // Handle change event on the invoice type select
            $('#InvoiceTypeSelect').change(function() {
                var selectedValue = $(this).val();
                // Show customer select only if the selected value is "1" (Credit)
                if (selectedValue === "1") {
                    $('#customerSelect').show();
                } else {
                    $('#customerSelect').hide();
                    $('#customerSelectV').val(''); // Reset the selection
                }
            });

            // Trigger the change event on page load in case there's a selected value
            $('#InvoiceTypeSelect').trigger('change');

            // Search functionality
            $('#searchInput').on('input', function() {
                debugger
                const searchTerm = $(this).val().toLowerCase();
                const products = $('.product-grid-item');

                products.each(function() {
                    const title = $(this).find('.product-title').text().toLowerCase();
                    const productContainer = $(this).closest('[data-category]').closest('.product-grid-item');

                    if (title.includes(searchTerm)) {
                        productContainer.show();
                    } else {
                        productContainer.hide();
                    }
                });

                // If search is cleared, reapply current category filter
                if (searchTerm === '') {
                    const activeCategory = $('.category-pill.active');
                    if (activeCategory.length) {
                        const categoryText = activeCategory.text().trim();
                        if (categoryText === 'الكل') {
                            filterProducts('all', activeCategory[0]);
                        } else {
                            // Extract category name from button text (remove icon)
                            const categoryName = categoryText.replace(/^\s*[\w\s]*\s+/, '').trim();
                            filterProductsByName(categoryName, activeCategory[0]);
                        }
                    }
                }
            });

            // Prevent form submission when clicking product cards
            $(document).on('click', function(e) {
                if ($(e.target).closest('.product-card').length && !$(e.target).closest('.add-to-cart-btn').length) {
                    e.preventDefault();
                }
            });

            // Initialize
            updateTime();
            setInterval(updateTime, 60000); // Update every minute

            // Initialize category filter - set "الكل" as active
            $('.category-pill').first().addClass('active');

            // Enhanced mobile touch events
            if ('ontouchstart' in window) {
                $(document).on('touchstart', function() {}, {passive: true});
            }
        });

        // Filter products by category name - UPDATED VERSION
        function filterProducts(categoryName, clickedElement) {
            debugger
            const products = $('.product-grid-item'); // Target the column divs directly
            const categoryPills = $('.category-pill');

            // Update active pill
            categoryPills.removeClass('active');
            $(clickedElement).addClass('active');

            if (categoryName === 'all') {
                products.show();
            } else {
                products.each(function() {
                    debugger
                    const productCategory = $(this).attr('data-category');
                    if (productCategory === categoryName) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }
        }

        // Add item to cart
        function addToCart(id, name, price, image,q=1) {
            // Find the product card to check stock
            const productCard = $(`.product-card[onclick*="${id}"]`);
            const stockDisplay = productCard.find('.product-price:contains("متبقي")');
            let availableStock = 0;

            if (productCard.length) {
                if (stockDisplay.length) {
                    availableStock = parseInt(stockDisplay.text().match(/\d+/)[0]);
                }
            }

            let InvoiceTypeSelectedval = $('#InvoiceTypeSelect').val()
            let ifDecreaseItemsInvoice = (InvoiceTypeSelectedval === "0") || (InvoiceTypeSelectedval === "1") || (InvoiceTypeSelectedval === "5") ;

            if (availableStock <= 0 && ifDecreaseItemsInvoice && q>0) { //existingItem.quantity >= availableStock
                showAlert('تنبيه', 'هذا المنتج غير متوفر في المخزن', 'warning');
                return;
            }

            const existingItem = cart.find(item => item.id === id);

            if (existingItem) {
                if (availableStock <= 0 && ifDecreaseItemsInvoice && q>0) { //existingItem.quantity >= availableStock
                    showAlert('تنبيه', 'لا يوجد كمية كافية في المخزن', 'warning');
                    return;
                }
                existingItem.quantity += q;
                // SweetAlert for quantity increased
                // Swal.fire({
                //     icon: 'success',
                //     title: 'تمت الزيادة',
                //     text: 'تمت زيادة الكمية في السلة',
                //     timer: 900,
                //     showConfirmButton: false
                // });
            } else {
                cart.push({
                    id: id,
                    name: name,
                    price: price,
                    image: image,
                    quantity: 1
                });
                // SweetAlert for new product added
                // Swal.fire({
                //     icon: 'success',
                //     title: 'تمت الإضافة',
                //     text: 'تمت إضافة المنتج إلى السلة',
                //     timer: 1200,
                //     showConfirmButton: false
                // });
            }

            updateCartDisplay();
            updateInvoiceItemsInputs();
            showAddToCartAnimation();

            // Update the stock display
            if (productCard.length && stockDisplay.length) {
                const newStock = availableStock - q;
                stockDisplay.text(stockDisplay.text().replace(/\d+/, newStock));

                // Disable if stock reaches zero
                if (newStock <= 0) {
                    productCard.find('.add-to-cart-btn')
                        .prop('disabled', true)
                        .html('<i class="fas fa-times me-1"></i> غير متوفر');
                }else{
                     productCard.find('.add-to-cart-btn')
                        .prop('disabled', false)
                        .html('<i class="fas fa-cart-plus me-1"></i> إضافة للسلة');
                }
            }
        }

        // Remove item from cart
        function removeFromCart(id) {
            cart = cart.filter(item => item.id !== id);
            updateCartDisplay();
            updateInvoiceItemsInputs();
        }

        // Update invoice items hidden inputs
        function updateInvoiceItemsInputs() {
            const container = $('#invoiceItemsInputs');
            container.empty();

            cart.forEach((item, index) => {
                const inputs = `
                    <input type="hidden" name="Items[${index}].ProductId" value="${item.id}" />
                    <input type="hidden" name="Items[${index}].ProductName" value="${item.name}" />
                    <input type="hidden" name="Items[${index}].Quantity" value="${item.quantity}" />
                    <input type="hidden" name="Items[${index}].UnitPrice" value="${item.price}" />
                    <input type="hidden" name="Items[${index}].Total" value="${(item.price * item.quantity).toFixed(2)}" />
                `;
                container.append(inputs);
            });
        }

        // Update cart display
        function updateCartDisplay() {
            const cartItemsContainer = $('#cartItems');
            const cartItemsCount = $('#cartItemsCount');

            if (cart.length === 0) {
                const emptyMessage = `
                    <div class="text-center text-muted py-5" id="emptyCartMessage">
                        <i class="fas fa-shopping-cart fa-3x mb-3 opacity-50"></i>
                        <p>سلة المشتريات فارغة</p>
                        <small>اختر المنتجات لإضافتها إلى السلة</small>
                    </div>
                `;
                cartItemsContainer.html(emptyMessage);
                cartItemsCount.text('0');
                $('#total').text('0.00 ج.م');
                $('#totalInvoiceInput').val('0');
            } else {
                let cartHTML = '';
                let total = 0;

                // Add clear all button
                // cartHTML += `
                //     <button type="button" class="clear-all-btn" onclick="clearAllItems()">
                //         <i class="fas fa-trash-alt me-1"></i>
                //         إفراغ السلة
                //     </button>
                // `;

                cart.forEach(item => {
                    const itemTotal = item.price * item.quantity;
                    total += itemTotal;

                    cartHTML += `
                    <div class="cart-item border rounded p-2 mb-2 bg-white shadow-sm">
            <div class="row align-items-center g-2">
                <!-- Product Image Column -->
                <div class="col-3 col-md-2">
                    <img src="${item.image}"
                         class="cart-item-img img-fluid rounded"
                         alt="${item.name}">
                </div>

                <!-- Product Info and Quantity Controls -->
                <div class="col-6 col-md-7">
                    <h6 class="cart-item-name mb-2 text-truncate fw-semibold">${item.name}</h6>
                    <div class="d-flex justify-content-center align-items-center gap-2">
                        <button type="button"
                                class="cart-qty-btn btn btn-outline-secondary btn-sm"
                                onclick="updateQuantity(${item.id}, -1)">
                                    <i class="fas fa-minus" style="margin: unset;"></i>
                        </button>
                        <input type="hidden" asp-for="Items.ProductId" value="${item.id}"/>
                        <input type="hidden" asp-for="Items.Quantity" value="${item.quantity}"/>
                        <span class="cart-qty-display px-3 py-1 border rounded">${item.quantity}</span>
                        <button type="button"
                                class="cart-qty-btn btn btn-outline-secondary btn-sm"
                                onclick="updateQuantity(${item.id}, 1)">
                            <i class="fas fa-plus"  style="margin: unset;"></i>
                        </button>
                    </div>
                </div>

                <!-- Price and Delete Column -->
                <div class="col-3 col-md-3 ">
                    <div class="mb-2">
                        <strong class="cart-item-price text-success fs-5">${itemTotal.toFixed(2)} ج.م</strong>
                    </div>
                    <button type="button"
                            class="cart-delete-btn btn btn-outline-danger btn-sm"
                            onclick="removeFromCart(${item.id})">
                        <i class="fas fa-trash"  style="margin: unset;"></i>
                    </button>
                </div>
            </div>
        </div>
                    `;
                });

                cartItemsContainer.html(cartHTML);
                cartItemsCount.text(cart.reduce((sum, item) => sum + item.quantity, 0));

                $('#total').text(`${total.toFixed(2)} ج.م`);
                $('#totalInvoiceInput').val(total.toFixed(2));

                cartTotal = total;
            }
        }

        // Clear cart (existing function for cancel button)
        function clearCart() {
            if (cart.length === 0) return;

                    showConfirm('تنبيه', 'هل أنت متأكد أنك تريد إفراغ السلة؟', function() {
            cart = [];
            updateCartDisplay();
            updateInvoiceItemsInputs();
        });
        }

        // Clear all items (new function for clear all button)
        function clearAllItems() {
            if (cart.length === 0) return;

                    showConfirm('تنبيه', 'هل أنت متأكد أنك تريد حذف جميع العناصر من السلة؟', function() {
            cart = [];
            updateCartDisplay();
            updateInvoiceItemsInputs();

            const cartIcon = $('.cart-header i');
            if (cartIcon.length) {
                cartIcon.addClass('fa-shake');
                setTimeout(() => {
                    cartIcon.removeClass('fa-shake');
                }, 1000);
            }
        });
        }

        // Add to cart animation
        function showAddToCartAnimation() {
            const cartIcon = $('.cart-header i');
            if (cartIcon.length) {
                cartIcon.addClass('fa-bounce');
                setTimeout(() => {
                    cartIcon.removeClass('fa-bounce');
                }, 1000);
            }
        }

        // Update time
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('ar-SA', {
                hour: '2-digit',
                minute: '2-digit'
            });
            const timeElement = $('#currentTime');
            if (timeElement.length) {
                timeElement.text(timeString);
            }
        }

        $(document).ready(function() {
            $('#invoiceForm').on('submit', function(e) {
                e.preventDefault();
                var form = $(this);
                var formData = form.serialize() + '&dist=pos';
                // Show SweetAlert loading spinner
                Swal.fire({
                    title: 'جاري المعالجة...',
                    text: 'يرجى الانتظار حتى يتم حفظ الفاتورة',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: formData,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'نجاح',
                                text: response.message,
                                timer: 2000,
                                showConfirmButton: false
                            }).then(() => {
                                location.reload(); // or clearCart();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'خطأ',
                                text: response.message.split('.')[0]
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            icon: 'error',
                            title: 'خطأ',
                            text: 'حدث خطأ غير متوقع.'
                        });
                    }
                });
            });
        });
    </script>
}
