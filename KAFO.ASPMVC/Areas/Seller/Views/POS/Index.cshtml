@model InvoiceViewModel
@{
    ViewData["Title"] = "نقطة البيع";
    Layout = "_Layout";
    var e = ViewData.ModelState.IsValid;
    // List<string> invoiceTypes = ["فاتورة نقدي", "فاتورة اجل", "فاتورة مرتجع نقدي", "فاتورة مرتجع اجل"];
    // SelectList selectListItems = new SelectList(invoiceTypes);
}
<link rel="stylesheet" href="~/css/POS.css" asp-append-version="true" />
<div class="container-fluid">
    <div class="main-container">

        <form asp-action="Create" method="post" id="invoiceForm">
            <div class="row">
                <!-- Products Section -->
                <div class="col-lg-8">
                    <!-- Invoice Type Selection -->
                    <div class="mb-2">
                        <label asp-for="Type" class="form-label fw-bold">نوع الفاتورة</label>
                        <select asp-for="Type" class="form-select" asp-items="Html.GetEnumSelectList<InvoiceType>()" id="InvoiceTypeSelect">
                        </select>
                        <span asp-validation-for="Type" class="mt-2 text-danger"></span>
                        <select asp-for="CustomerAccount.Id" class="mt-2 form-select" id="customerSelect" style="display: none;">
                            <option value="">اختر العميل</option>
                            @if (ViewBag.Customers != null)
                            {
                                foreach (var customer in (List<KAFO.Domain.Users.CustomerAccount>) ViewBag.Customers)
                                {
                                    <option value="@customer.Id">@customer.CustomerName</option>
                                }
                            }
                        </select>
                    </div>

                    <!-- Search Bar -->
                    <div class="search-container">
                        <div class="position-relative">
                            <input type="text" class="form-control search-input" placeholder="البحث عن المنتجات..." id="searchInput">
                        </div>
                    </div>

                    <!-- Category Pills -->
                    <div class="category-pills">
                        <div>
                            <button type="button" class="category-pill" onclick="filterProducts('all', this)">
                            <i class="fas fa-th-large me-1"></i>
                                الكل
                            </button>
                            @foreach (Category cat in ViewBag.Cats)
                            {
                                <button type="button" class="category-pill" onclick="filterProducts('@cat.Name', this)">
                                    @cat.Name
                                </button>
                            }
                        </div>
                    </div>


                    <!-- Products Grid -->
                    <div class="products-grid" id="productsGrid">
                            <h6 class="mb-3 fw-bold text-secondary">
                            <i class="fas fa-shopping-bag me-2"></i>
                                المنتجات
                            </h6>
                        <div class="row" id="productsList">
                            @if (ViewBag.Products != null)
                            {
                                @foreach (var product in ViewBag.Products)
                                {
                                    <div class="col-md-4 col-sm-6 mb-3" data-category="@product.Category.Name">
                                        <div class="product-card position-relative" onclick="addToCart(@product.Id, '@product.Name', @product.SellingPrice, '@product.ImageUrl')">
                                            <div class="ImgContainer">
                                            <img src="@product.ImageUrl" class="product-image" alt="@product.Name">
                                            </div>
                                            <div class="product-info">
                                                <h6 class="product-title">@product.Name</h6>
                                                <div class="d-flex align-items-center justify-content-between">
                                                    <div>
                                                        <span class="product-price">@product.SellingPrice.ToString("N2") ج.م</span>
                                                    </div>
                                                    <div>
                                                        <span class="product-price">متبقي  @product.StockQuantity قطع </span>
                                                    </div>
                                                </div>
                                                <button type="button" class="add-to-cart-btn" onclick="event.stopPropagation(); addToCart(@product.Id, '@product.Name', @product.SellingPrice, '@product.ImageUrl')">
                                                    <i class="fas fa-cart-plus me-1"></i>
                                                    إضافة للسلة
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <!-- Cart Section -->
                <div class="col-lg-4">
                <span class="EmptyCart text-danger"></span>
                    <div class="cart-container">
                        <div class="cart-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">
                                    <i class="fas fa-shopping-cart me-2"></i>
                                    سلة المشتريات
                                </h5>
                                <span class="badge bg-light text-dark" id="cartItemsCount">0</span>
                            </div>
                        </div>

                        <div class="cart-items" id="cartItems">
                            <div class="text-center text-muted py-5" id="emptyCartMessage">
                                <i class="fas fa-shopping-cart fa-3x mb-3 opacity-50"></i>
                                <p>سلة المشتريات فارغة</p>
                                <small>اختر المنتجات لإضافتها إلى السلة</small>
                            </div>
                        </div>

                        <!-- Hidden inputs for invoice items -->
                        <div id="invoiceItemsInputs"></div>

                        <div class="cart-summary">
                            <div class="summary-row">
                                <span>المجموع الكلي:</span>
                                <span id="total">0.00 ج.م</span>
                            </div>

                            <input type="hidden" asp-for="TotalInvoice" id="totalInvoiceInput" />

                            <div class="action-buttons">
                                <button type="button" class="action-btn btn-cancel" onclick="clearCart()">
                                    <i class="fas fa-times-circle"></i>
                                    إلغاء
                                </button>
                                <button type="submit" class="action-btn btn-charge" id="processPaymentBtn">
                                    <i class="fas fa-credit-card"></i>
                                    دفع
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@* <!-- Payment Modal --> *@
@* <div class="modal fade" id="paymentModal" tabindex="-1"> *@
@*     <div class="modal-dialog modal-dialog-centered"> *@
@*         <div class="modal-content" style="border-radius: var(--border-radius); border: none; box-shadow: var(--box-shadow-lg);"> *@
@*             <div class="modal-header bg-primary text-white" style="border-radius: var(--border-radius) var(--border-radius) 0 0;"> *@
@*                 <h5 class="modal-title"> *@
@*                     <i class="fas fa-credit-card me-2"></i> *@
@*                     معالجة الدفع *@
@*                 </h5> *@
@*                 <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button> *@
@*             </div> *@
@*             <div class="modal-body p-4"> *@
@*                 <div class="text-center mb-4"> *@
@*                     <div class="spinner-border text-primary" role="status"> *@
@*                         <span class="visually-hidden">جاري المعالجة...</span> *@
@*                     </div> *@
@*                     <p class="mt-3 mb-0">جاري معالجة عملية الدفع...</p> *@
@*                     <small class="text-muted">يرجى الانتظار</small> *@
@*                 </div> *@
@*                 <div class="bg-light p-3 rounded"> *@
@*                     <div class="d-flex justify-content-between"> *@
@*                         <strong>المبلغ المطلوب:</strong> *@
@*                         <strong class="text-success" id="paymentAmount">0.00 ج.م</strong> *@
@*                     </div> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

@* <!-- Success Modal --> *@
@* <div class="modal fade" id="successModal" tabindex="-1"> *@
@*     <div class="modal-dialog modal-dialog-centered"> *@
@*         <div class="modal-content" style="border-radius: var(--border-radius); border: none; box-shadow: var(--box-shadow-lg);"> *@
@*             <div class="modal-body text-center p-5"> *@
@*                 <div class="text-success mb-4"> *@
@*                     <i class="fas fa-check-circle fa-4x"></i> *@
@*                 </div> *@
@*                 <h4 class="text-success mb-3">تمت العملية بنجاح!</h4> *@
@*                 <p class="text-muted mb-4">تم إتمام عملية الدفع وحفظ الفاتورة</p> *@
@*                 <button type="button" class="btn btn-primary btn-lg" data-bs-dismiss="modal" onclick="clearCart()"> *@
@*                     <i class="fas fa-check me-2"></i> *@
@*                     موافق *@
@*                 </button> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

<!-- Custom Alert Modal -->
<div class="modal fade" id="alertModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="border-radius: var(--border-radius); border: none; box-shadow: var(--box-shadow-lg);">
            <div class="modal-body text-center p-4">
                <div class="mb-3" id="alertIcon">
                    <i class="fas fa-exclamation-circle fa-4x text-warning"></i>
                </div>
                <h4 class="mb-3" id="alertTitle">تنبيه</h4>
                <p class="text-muted mb-4" id="alertMessage"></p>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="alertConfirmBtn">
                    <i class="fas fa-check me-2"></i>
                    موافق
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Update quantity function with zero check
        function updateQuantity(id, change) {
            const item = cart.find(item => item.id === id);
            if (item) {
                item.quantity += change;

                // Prevent quantity from going below zero
                if (item.quantity <= 0) {
                    removeFromCart(id);
                } else {
                    updateCartDisplay();
                    updateInvoiceItemsInputs();

                    // Find the product card and update its stock display
                    const productCard = $(`.product-card[onclick*="${id}"]`);
                    if (productCard.length) {
                        const stockDisplay = productCard.find('.product-price:contains("متبقي")');
                        if (stockDisplay.length) {
                            const currentText = stockDisplay.text();
                            const currentStock = parseInt(currentText.match(/\d+/)[0]);
                            const newStock = currentStock - change;
                            stockDisplay.text(currentText.replace(/\d+/, newStock));

                            // Disable add button if stock reaches zero
                            const addButton = productCard.find('.add-to-cart-btn');
                            if (newStock <= 0) {
                                addButton.prop('disabled', true)
                                    .removeClass('add-to-cart-btn')
                                    .addClass('btn-outline-secondary')
                                    .html('<i class="fas fa-times me-1"></i> غير متوفر');
                            }
                        }
                    }
                }
            }
        }

                // Show beautiful alert
        function showAlert(title, message, type = 'warning') {
            const modal = $('#alertModal');
            const iconMap = {
                'warning': 'exclamation-circle',
                'error': 'times-circle',
                'success': 'check-circle',
                'info': 'info-circle'
            };
            const colorMap = {
                'warning': 'warning',
                'error': 'danger',
                'success': 'success',
                'info': 'primary'
            };

            $('#alertTitle').text(title);
            $('#alertMessage').text(message);
            $('#alertIcon').html(`<i class="fas fa-${iconMap[type]} fa-4x text-${colorMap[type]}"></i>`);

            // Remove any existing click handlers
            $('#alertConfirmBtn').off('click');

            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();
        }

        // Show beautiful confirm dialog
        function showConfirm(title, message, confirmCallback, type = 'warning') {
            const modal = $('#alertModal');
            const iconMap = {
                'warning': 'exclamation-triangle',
                'error': 'times-circle',
                'success': 'check-circle',
                'info': 'question-circle'
            };
            const colorMap = {
                'warning': 'warning',
                'error': 'danger',
                'success': 'success',
                'info': 'primary'
            };

            $('#alertTitle').text(title);
            $('#alertMessage').text(message);
            $('#alertIcon').html(`<i class="fas fa-${iconMap[type]} fa-4x text-${colorMap[type]}"></i>`);

            // Remove any existing click handlers
            $('#alertConfirmBtn').off('click');

            // Add new click handler
            $('#alertConfirmBtn').on('click', function() {
                confirmCallback();
            });

            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();
        }
        // Cart functionality
        let cart = [];
        let cartTotal = 0;

        $(document).ready(function() {
        @if (!ViewData.ModelState.IsValid)
        {
            <text>
                        $('#alertModal').modal('show');
            </text>
        }
            // Handle form submission to prevent empty cart
            $('form').submit(function(e) {
                if (cart.length === 0) {
                    e.preventDefault();
                    // $('.EmptyCart').text('لا يمكن تقديم الفاتورة بدون أي منتجات في السلة');
                    showAlert('تنبيه', 'لا يمكن تقديم الفاتورة بدون أي منتجات في السلة', 'warning');
                    return false;
                }
                        if($('#InvoiceTypeSelect').val() === "1" && $('#customerSelect').val() === ''){
            showAlert('تنبيه', 'برجاء اختيار العميل', 'warning');
            return false;
        }
            });

            // Handle change event on the invoice type select
            $('#InvoiceTypeSelect').change(function() {
                var selectedValue = $(this).val();
                // Show customer select only if the selected value is "1" (Credit)
                if (selectedValue === "1") {
                    $('#customerSelect').show();
                } else {
                    $('#customerSelect').hide();
                    $('#customerSelect').val(''); // Reset the selection
                }
            });

            // Trigger the change event on page load in case there's a selected value
            $('#InvoiceTypeSelect').trigger('change');

            // Search functionality
            $('#searchInput').on('input', function() {
                const searchTerm = $(this).val().toLowerCase();
                const products = $('.product-card');

                products.each(function() {
                    const title = $(this).find('.product-title').text().toLowerCase();
                    const productContainer = $(this).closest('[data-category]').closest('.col-md-4, .col-sm-6');

                    if (title.includes(searchTerm)) {
                        productContainer.show();
                    } else {
                        productContainer.hide();
                    }
                });

                // If search is cleared, reapply current category filter
                if (searchTerm === '') {
                    const activeCategory = $('.category-pill.active');
                    if (activeCategory.length) {
                        const categoryText = activeCategory.text().trim();
                        if (categoryText === 'الكل') {
                            filterProducts('all', activeCategory[0]);
                        } else {
                            // Extract category name from button text (remove icon)
                            const categoryName = categoryText.replace(/^\s*[\w\s]*\s+/, '').trim();
                            filterProductsByName(categoryName, activeCategory[0]);
                        }
                    }
                }
            });

            // Prevent form submission when clicking product cards
            $(document).on('click', function(e) {
                if ($(e.target).closest('.product-card').length && !$(e.target).closest('.add-to-cart-btn').length) {
                    e.preventDefault();
                }
            });

            // Initialize
            updateTime();
            setInterval(updateTime, 60000); // Update every minute

            // Initialize category filter - set "الكل" as active
            $('.category-pill').first().addClass('active');

            // Enhanced mobile touch events
            if ('ontouchstart' in window) {
                $(document).on('touchstart', function() {}, {passive: true});
            }
        });

        // Filter products by category name - UPDATED VERSION
        function filterProducts(categoryName, clickedElement) {
            const products = $('.col-md-4, .col-sm-6'); // Target the column divs directly
            const categoryPills = $('.category-pill');

            // Update active pill
            categoryPills.removeClass('active');
            $(clickedElement).addClass('active');

            if (categoryName === 'all') {
                products.show();
            } else {
                products.each(function() {
                    const productCategory = $(this).attr('data-category');
                    if (productCategory === categoryName) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }
        }

        // Add item to cart
        function addToCart(id, name, price, image) {
            // Find the product card to check stock
            const productCard = $(`.product-card[onclick*="${id}"]`);
            let availableStock = 0;

            if (productCard.length) {
                const stockDisplay = productCard.find('.product-price:contains("متبقي")');
                if (stockDisplay.length) {
                    availableStock = parseInt(stockDisplay.text().match(/\d+/)[0]);
                }
            }

            let InvoiceTypeSelectedval = $('#InvoiceTypeSelect').val()
            let ifDecreaseItemsInvoice = (InvoiceTypeSelectedval === "0") || (InvoiceTypeSelectedval === "1") || (InvoiceTypeSelectedval === "5") ;

            if (availableStock <= 0 && ifDecreaseItemsInvoice) {
                showAlert('تنبيه', 'هذا المنتج غير متوفر في المخزن', 'warning');
                return;
            }

            const existingItem = cart.find(item => item.id === id);

            if (existingItem) {
                if (existingItem.quantity >= availableStock && ifDecreaseItemsInvoice) {
                    showAlert('تنبيه', 'لا يوجد كمية كافية في المخزن', 'warning');
                    return;
                }
                existingItem.quantity += 1;
            } else {
                cart.push({
                    id: id,
                    name: name,
                    price: price,
                    image: image,
                    quantity: 1
                });
            }

            updateCartDisplay();
            updateInvoiceItemsInputs();
            showAddToCartAnimation();

            // Update the stock display
            if (productCard.length && stockDisplay.length) {
                const newStock = availableStock - 1;
                stockDisplay.text(stockDisplay.text().replace(/\d+/, newStock));

                // Disable if stock reaches zero
                if (newStock <= 0) {
                    productCard.find('.add-to-cart-btn')
                        .prop('disabled', true)
                        .removeClass('add-to-cart-btn')
                        .addClass('btn-outline-secondary')
                        .html('<i class="fas fa-times me-1"></i> غير متوفر');
                }
            }
        }

        // Remove item from cart
        function removeFromCart(id) {
            cart = cart.filter(item => item.id !== id);
            updateCartDisplay();
            updateInvoiceItemsInputs();
        }

        // Update item quantity
        function updateQuantity(id, change) {
            const item = cart.find(item => item.id === id);
            if (item) {
                item.quantity += change;
                if (item.quantity <= 0) {
                    removeFromCart(id);
                } else {
                    updateCartDisplay();
                    updateInvoiceItemsInputs();
                }
            }
        }

        // Update invoice items hidden inputs
        function updateInvoiceItemsInputs() {
            const container = $('#invoiceItemsInputs');
            container.empty();

            cart.forEach((item, index) => {
                const inputs = `
                    <input type="hidden" name="Items[${index}].ProductId" value="${item.id}" />
                    <input type="hidden" name="Items[${index}].ProductName" value="${item.name}" />
                    <input type="hidden" name="Items[${index}].Quantity" value="${item.quantity}" />
                    <input type="hidden" name="Items[${index}].UnitPrice" value="${item.price}" />
                    <input type="hidden" name="Items[${index}].Total" value="${(item.price * item.quantity).toFixed(2)}" />
                `;
                container.append(inputs);
            });
        }

        // Update cart display
        function updateCartDisplay() {
            const cartItemsContainer = $('#cartItems');
            const cartItemsCount = $('#cartItemsCount');

            if (cart.length === 0) {
                const emptyMessage = `
                    <div class="text-center text-muted py-5" id="emptyCartMessage">
                        <i class="fas fa-shopping-cart fa-3x mb-3 opacity-50"></i>
                        <p>سلة المشتريات فارغة</p>
                        <small>اختر المنتجات لإضافتها إلى السلة</small>
                    </div>
                `;
                cartItemsContainer.html(emptyMessage);
                cartItemsCount.text('0');
                $('#total').text('0.00 ج.م');
                $('#totalInvoiceInput').val('0');
            } else {
                let cartHTML = '';
                let total = 0;

                // Add clear all button
                // cartHTML += `
                //     <button type="button" class="clear-all-btn" onclick="clearAllItems()">
                //         <i class="fas fa-trash-alt me-1"></i>
                //         إفراغ السلة
                //     </button>
                // `;

                cart.forEach(item => {
                    const itemTotal = item.price * item.quantity;
                    total += itemTotal;

                    cartHTML += `
                                                <div class="cart-item border rounded p-2 mb-2 bg-white shadow-sm" style="max-width: 350px;">
            <div class="row align-items-center g-2">
                <div class="col-4">
                    <img src="${item.image}" class="img-fluid rounded" alt="${item.name}" style="max-height: 80px;">
                </div>
                <div class="col-5 text-center">
                    <h6 class="mb-2 text-truncate">${item.name}</h6>
                    <div class="input-group input-group-xs w-75 mx-auto">
                        <button type="button" class="btn btn-outline-secondary btn-xs" onclick="updateQuantity(${item.id}, -1)">
                            <i class="fas fa-minus fa-xs"></i>
                        </button>
                        <input type="hidden" asp-for="Items.ProductId" value="${item.id}"/>
                        <input type="hidden" asp-for="Items.Quantity" value="${item.quantity}"/>
                        <span class="input-group-text px-2">${item.quantity}</span>
                        <button type="button" class="btn btn-outline-secondary btn-xs" onclick="updateQuantity(${item.id}, 1)">
                            <i class="fas fa-plus fa-xs"></i>
                        </button>
                    </div>
                </div>
                <div class="col-3 text-end pe-2">
                    <div class="mb-2">
                        <strong class="text-success small">${itemTotal.toFixed(2)} ج.م</strong>
                    </div>
                    <button type="button" class="btn btn-danger btn-xs" onclick="removeFromCart(${item.id})">
                        <i class="fas fa-trash fa-xs"></i>
                    </button>
                </div>
            </div>
        </div>
                    `;
                });

                cartItemsContainer.html(cartHTML);
                cartItemsCount.text(cart.reduce((sum, item) => sum + item.quantity, 0));

                $('#total').text(`${total.toFixed(2)} ج.م`);
                $('#totalInvoiceInput').val(total.toFixed(2));

                cartTotal = total;
            }
        }

        // Clear cart (existing function for cancel button)
        function clearCart() {
            if (cart.length === 0) return;

                    showConfirm('تنبيه', 'هل أنت متأكد أنك تريد إفراغ السلة؟', function() {
            cart = [];
            updateCartDisplay();
            updateInvoiceItemsInputs();
        });
        }

        // Clear all items (new function for clear all button)
        function clearAllItems() {
            if (cart.length === 0) return;

                    showConfirm('تنبيه', 'هل أنت متأكد أنك تريد حذف جميع العناصر من السلة؟', function() {
            cart = [];
            updateCartDisplay();
            updateInvoiceItemsInputs();

            const cartIcon = $('.cart-header i');
            if (cartIcon.length) {
                cartIcon.addClass('fa-shake');
                setTimeout(() => {
                    cartIcon.removeClass('fa-shake');
                }, 1000);
            }
        });
        }

        // Add to cart animation
        function showAddToCartAnimation() {
            const cartIcon = $('.cart-header i');
            if (cartIcon.length) {
                cartIcon.addClass('fa-bounce');
                setTimeout(() => {
                    cartIcon.removeClass('fa-bounce');
                }, 1000);
            }
        }

        // Update time
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('ar-SA', {
                hour: '2-digit',
                minute: '2-digit'
            });
            const timeElement = $('#currentTime');
            if (timeElement.length) {
                timeElement.text(timeString);
            }
        }
    </script>
}