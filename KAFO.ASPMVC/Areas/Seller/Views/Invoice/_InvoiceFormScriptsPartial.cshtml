<script>
    $(document).ready(function () {
        // Initialize with one empty row if no items exist
        if ($('#itemsContainer tr').length === 0) {
            addNewItemRow();
        }

        // Add new item row
        $('#addItemBtn').click(function () {
            addNewItemRow();
        });

        function addNewItemRow() {
            var rowCount = $('#itemsContainer tr').length;
            var newRow = `
                <tr data-row-index="${rowCount}">
                    <td>
                        <div class="input-group">
                            <input type="text" class="form-control product-search" placeholder="اختر منتج..." readonly />
                            <input type="hidden" class="product-id" name="Items[${rowCount}].ProductId" />
                            <div class="input-group-append">
                                <button class="btn btn-primary product-search-btn" type="button">
                                    <i class="fas fa-search"></i> بحث
                                </button>
                            </div>
                        </div>
                        <div class="product-info mt-2 d-none">
                            <img src="" class="product-image img-thumbnail mr-2" width="40" height="40" />
                            <span class="product-name text-primary font-weight-bold"></span>
                        </div>
                    </td>
                    <td>
                        <input type="number" min="0" step="1" class="form-control piece-quantity" value="0" />
                    </td>
                    <td hidden>
                        <input type="number" min="0" step="1" class="form-control total-piece-quantity" name="Items[${rowCount}].Quantity" value="0" />
                    </td>
                    <td>
                        <input type="number" min="0" step="1" class="form-control box-quantity" value="0" />
                    </td>
                    <td>
                        <input type="number" min="1" step="1" class="form-control box-capacity" readonly />
                    </td>
                    <td>
                        <input type="number" min="0" step="0.01" class="form-control unit-price" name="Items[${rowCount}].UnitPurchasingPrice" />
                    </td>
                    <td>
                        <input type="number" min="0" step="0.01" class="form-control box-price" name="Items[${rowCount}].BoxPurchasePrice" />
                    </td>
                    <td>
                        <input type="number" min="0" step="0.01" class="form-control selling-price" name="Items[${rowCount}].UnitSellingPrice" />
                    </td>
                    <td>
                        <input type="number" class="form-control item-total" readonly />
                    </td>
                    <td class="text-center">
                        <button type="button" class="btn btn-danger btn-sm remove-item">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `;
            $('#itemsContainer').append(newRow);
        }

        // Product search functionality
        $(document).on('click', '.product-search-btn', function () {
            var currentRow = $(this).closest('tr');
            $('#productSearchModal').data('current-row', currentRow).modal('show');
        });

        // Select product from modal
        $(document).on('click', '.select-product', function () {
            var productId = $(this).data('id');
            var productName = $(this).data('name');
            var productBoxPrice = $(this).data('boxprice');
            var productBoxQuantity = $(this).data('boxquantity');
            var productImage = $(this).data('image');
            var productSellingPrice = $(this).closest('tr').find('.selling-price').val();
            // Try to get selling price from a data attribute if available
            if ($(this).data('sellingprice')) {
                productSellingPrice = $(this).data('sellingprice');
            } else if ($(this).closest('tr').find('.selling-price').length > 0) {
                productSellingPrice = $(this).closest('tr').find('.selling-price').val();
            } else {
                productSellingPrice = '';
            }

            var currentRow = $('#productSearchModal').data('current-row');

            currentRow.find('.product-search').val(productName);
            currentRow.find('.product-id').val(productId);
            currentRow.find('.box-price').val(productBoxPrice);
            currentRow.find('.box-capacity').val(productBoxQuantity);
            // Calculate unit price from box price and box capacity
            var calculatedUnitPrice = 0;
            if (productBoxQuantity > 0) {
                calculatedUnitPrice = productBoxPrice / productBoxQuantity;
            }
            currentRow.find('.unit-price').val(calculatedUnitPrice.toFixed(2));
            currentRow.find('.product-info').removeClass('d-none');
            currentRow.find('.product-name').text(productName);
            currentRow.find('.product-image').attr('src', productImage || '');
            // Set the selling price for the selected product
            if ($(this).data('sellingprice')) {
                currentRow.find('.selling-price').val($(this).data('sellingprice'));
            } else if ($(this).closest('tr').find('.selling-price').length > 0) {
                currentRow.find('.selling-price').val($(this).closest('tr').find('.selling-price').val());
            } else {
                currentRow.find('.selling-price').val('');
            }

            $('#productSearchModal').modal('hide');

            // Calculate total for this row
            calculateRowTotal(currentRow);
        });

        // Calculate row total when quantities change
        $(document).on('change', '.piece-quantity, .box-quantity', function () {
            var currentRow = $(this).closest('tr');
            calculateRowTotal(currentRow);
        });

        // Auto-update unit price when box price or box capacity changes, and vice versa, and update total
        $(document).on('input', '.box-price, .box-capacity', function () {
            var row = $(this).closest('tr');
            var boxPrice = parseFloat(row.find('.box-price').val()) || 0;
            var boxCapacity = parseFloat(row.find('.box-capacity').val()) || 1;
            if (boxCapacity > 0) {
                var unitPrice = boxPrice / boxCapacity;
                row.find('.unit-price').val(unitPrice.toFixed(2));
            }
            calculateRowTotal(row);
        });
        $(document).on('input', '.unit-price, .box-capacity', function () {
            var row = $(this).closest('tr');
            var unitPrice = parseFloat(row.find('.unit-price').val()) || 0;
            var boxCapacity = parseFloat(row.find('.box-capacity').val()) || 1;
            var boxPrice = unitPrice * boxCapacity;
            row.find('.box-price').val(boxPrice.toFixed(2));
            calculateRowTotal(row);
        });
        $(document).on('input', '.selling-price', function () {
            var row = $(this).closest('tr');
            calculateRowTotal(row);
        });

        function calculateRowTotal(row) {
            var pieceQuantity = parseFloat(row.find('.piece-quantity').val()) || 0;
            var boxQuantity = parseFloat(row.find('.box-quantity').val()) || 0;
            var unitPrice = parseFloat(row.find('.unit-price').val()) || 0;
            var boxPrice = parseFloat(row.find('.box-price').val()) || 0;
            var boxCapacity = parseFloat(row.find('.box-capacity').val()) || 1;

            var totalPrice = (boxQuantity * boxPrice) + (pieceQuantity * unitPrice);
            var totalQuantity = pieceQuantity + (boxQuantity * boxCapacity);

            row.find('.item-total').val(totalPrice.toFixed(2));
            row.find('.total-piece-quantity').val(totalQuantity);

            // Validate row total
            if (totalPrice <= 0) {
                row.find('.item-total').addClass('is-invalid');
            } else {
                row.find('.item-total').removeClass('is-invalid');
            }

            // Update invoice total
            calculateInvoiceTotal();
        }

        function calculateInvoiceTotal() {
            var total = 0;
            var hasValidItems = false;

            $('#itemsContainer tr').each(function () {
                var rowTotal = parseFloat($(this).find('.item-total').val()) || 0;
                total += rowTotal;

                if (rowTotal > 0) {
                    hasValidItems = true;
                }
            });

            $('#totalInvoiceAmount').text(total.toFixed(2));

            // Validate at least one item with total > 0
            if (hasValidItems) {
                $('#itemsValidation').addClass('d-none');
            } else {
                $('#itemsValidation').removeClass('d-none');
            }
        }

        // Remove item row
        $(document).on('click', '.remove-item', function () {
            $(this).closest('tr').remove();
            calculateInvoiceTotal();

            // Reindex rows for model binding
            reindexRows();

            // Add empty row if no items left
            if ($('#itemsContainer tr').length === 0) {
                addNewItemRow();
            }
        });

        function reindexRows() {
            $('#itemsContainer tr').each(function (index) {
                $(this).attr('data-row-index', index);
                $(this).find('[name*="ProductId"]').attr('name', `Items[${index}].ProductId`);
                $(this).find('[name*="Quantity"]').attr('name', `Items[${index}].Quantity`);
                $(this).find('[name*="UnitPurchasingPrice"]').attr('name', `Items[${index}].UnitPurchasingPrice`);
            });
        }

        // Product search in modal
        $('#productSearchInput').on('keyup', function () {
            var value = $(this).val().toLowerCase();
            $('#productsTable tbody tr').filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });

        // Form validation before submit
        $('#invoiceForm').on('submit', function (e) {
            var isValid = true;

            // Check if at least one valid item exists
            var hasValidItems = false;
            $('#itemsContainer tr').each(function () {
                var rowTotal = parseFloat($(this).find('.item-total').val()) || 0;
                if (rowTotal > 0) {
                    hasValidItems = true;
                }
            });

            if (!hasValidItems) {
                $('#itemsValidation').removeClass('d-none');
                isValid = false;
            }

            // Check customer account for credit invoices
            var invoiceType = $('#invoiceType').val();
            if ((invoiceType == '@InvoiceType.Credit' || invoiceType == '@InvoiceType.CreditReturn') &&
                $('#CustomerAccountId').val() == '') {
                $('#CustomerAccountId').addClass('is-invalid');
                isValid = false;
            } else {
                $('#CustomerAccountId').removeClass('is-invalid');
            }

            if (!isValid) {
                e.preventDefault();
                $('html, body').animate({
                    scrollTop: $('.is-invalid').first().offset().top - 100
                }, 500);
            }
        });

        // Invoice image upload preview
        document.getElementById("invoiceImageUploadContainer").addEventListener("click", function () {
            document.getElementById("invoiceImageInput").click();
        });

        document.getElementById("invoiceImageInput").addEventListener("change", function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imgPreview = document.getElementById("invoiceImagePreview");
                    imgPreview.src = e.target.result;
                    imgPreview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        });
    });
</script>