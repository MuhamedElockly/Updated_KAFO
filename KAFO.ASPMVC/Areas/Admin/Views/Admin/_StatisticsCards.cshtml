@using KAFO.ASPMVC.Areas.Admin.ViewModels
@model AdminHomeVM

<link rel="stylesheet" href="~/css/statistics-cards.css" />

<div class="row mb-4">
	<div class="col-lg-4 col-md-6 mb-3">
		<div class="card statistics-card profit-card text-white">
			<div class="live-indicator"></div>
			<div class="card-body">
				<div class="card-icon-wrapper">
					<i class="fas fa-chart-line card-icon" id="profitIcon"></i>
					<div class="icon-glow"></div>
				</div>
				<h5 class="card-title">💰 إجمالي الأرباح اليوم</h5>
				<h2 class="card-text" id="totalProfitToday">@Model.TotalProfitToday جنيه</h2>
				<div class="card-subtitle">الأرباح المحققة</div>
				<div class="trend-indicator" id="profitTrend">📈</div>
				<div class="card-decoration">
					<div class="decoration-circle"></div>
					<div class="decoration-line"></div>
				</div>
			</div>
		</div>
	</div>
	<div class="col-lg-4 col-md-6 mb-3">
		<div class="card statistics-card sales-card text-white">
			<div class="live-indicator"></div>
			<div class="card-body">
				<div class="card-icon-wrapper">
					<i class="fas fa-shopping-cart card-icon" id="salesIcon"></i>
					<div class="icon-glow"></div>
				</div>
				<h5 class="card-title">🛒 إجمالي المبيعات اليوم</h5>
				<h2 class="card-text" id="totalSellsToday">@Model.TotalSellsToday جنيه</h2>
				<div class="card-subtitle">إجمالي المبيعات</div>
				<div class="trend-indicator" id="salesTrend">📊</div>
				<div class="card-decoration">
					<div class="decoration-circle"></div>
					<div class="decoration-line"></div>
				</div>
			</div>
		</div>
	</div>
	<div class="col-lg-4 col-md-6 mb-3">
		<div class="card statistics-card products-card text-white">
			<div class="live-indicator"></div>
			<div class="card-body">
				<div class="card-icon-wrapper">
					<i class="fas fa-box card-icon" id="productsIcon"></i>
					<div class="icon-glow"></div>
				</div>
				<h5 class="card-title">📦 عدد المنتجات المباعة اليوم</h5>
				<h2 class="card-text" id="totalProductSoldToday">@Model.TotalProductSoldToday منتج</h2>
				<div class="card-subtitle">المنتجات المباعة</div>
				<div class="trend-indicator" id="productsTrend">📈</div>
				<div class="card-decoration">
					<div class="decoration-circle"></div>
					<div class="decoration-line"></div>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- SignalR Script for Statistics Cards -->
<script>
	$(document).ready(function () {
		// Check if SignalR is available
		if (typeof signalR === 'undefined') {
			// Load SignalR dynamically if not available
			var script = document.createElement('script');
			script.src = '/lib/signalr.min.js';
			script.onload = function () {
				initializeSignalR();
			};
			script.onerror = function () {
				console.error("Failed to load SignalR library!");
			};
			document.head.appendChild(script);
		} else {
			initializeSignalR();
		}
		
		// Add entrance animations
		addEntranceAnimations();
	});

	function addEntranceAnimations() {
		$('.statistics-card').each(function(index) {
			$(this).css({
				'opacity': '0',
				'transform': 'translateY(30px) scale(0.9)'
			}).delay(index * 200).animate({
				'opacity': '1',
				'transform': 'translateY(0) scale(1)'
			}, 800, 'swing');
		});
	}

	function cleanNumberValue(value) {
		if (value === null || value === undefined) return 0;
		
		// Convert to string and remove any non-numeric characters except dots and commas
		var stringValue = value.toString();
		
		// Remove commas from the string (e.g., "1,679.91" becomes "1679.91")
		stringValue = stringValue.replace(/,/g, '');
		
		// Parse as float
		var numericValue = parseFloat(stringValue);
		
		// Return 0 if parsing failed
		return isNaN(numericValue) ? 0 : numericValue;
	}

	function initializeSignalR() {
		var conn = new signalR.HubConnectionBuilder()
			.withUrl("/statisticsHub")
			.withAutomaticReconnect()
			.build();

		// Connection event handlers
		conn.onreconnecting((error) => {
			// Silent reconnection
		});

		conn.onreconnected((connectionId) => {
			// Silent reconnection
		});

		conn.onclose((error) => {
			// Silent connection close
		});

		conn.start().catch(function (err) {
			console.error("SignalR Connection Error:", err);
		});

		conn.on("ReceiveStatisticsUpdate", function (data) {
			// Handle both uppercase and lowercase property names
			var profitToday = data.TotalProfitToday || data.totalProfitToday;
			var sellsToday = data.TotalSellsToday || data.totalSellsToday;
			var productSoldToday = data.TotalProductSoldToday || data.totalProductSoldToday;
			
			// Clean up the values to handle commas and ensure proper parsing
			profitToday = cleanNumberValue(profitToday);
			sellsToday = cleanNumberValue(sellsToday);
			productSoldToday = cleanNumberValue(productSoldToday);
			
			// Update statistics with enhanced animations
			updateStatisticWithCounter("#totalProfitToday", profitToday, " جنيه", ".profit-card");
			updateStatisticWithCounter("#totalSellsToday", sellsToday, " جنيه", ".sales-card");
			updateStatisticWithCounter("#totalProductSoldToday", productSoldToday, " منتج", ".products-card");
		});
	}

	function updateStatisticWithCounter(elementId, newValue, suffix, cardSelector) {
		if (!newValue) return;

		var element = $(elementId);
		var card = $(cardSelector);
		var icon = card.find('.card-icon');
		var iconWrapper = card.find('.card-icon-wrapper');

		// Get current value (remove suffix and convert to number)
		var currentText = element.text();
		// Improved regex to handle Arabic text and commas in numbers
		var currentValue = parseFloat(currentText.replace(/[^\d.,-]/g, '').replace(',', '')) || 0;
		var targetValue = parseFloat(newValue) || 0;

		// Animate counter if values are different
		if (Math.abs(currentValue - targetValue) > 0.01) { // Use small tolerance for floating point comparison
			// Add counter animation class
			element.addClass('counter-animation');

			// Animate the icon with enhanced effects
			animateIcon(icon, iconWrapper);

			// Animate the counter
			animateCounter(element, currentValue, targetValue, suffix, function () {
				// Remove animation class after completion
				setTimeout(function () {
					element.removeClass('counter-animation');
				}, 600);
			});

			// Show trend indicator
			showTrendIndicator(card, currentValue, targetValue);

			// Add data flow effect
			addDataFlowEffect(card);
			
			// Add card pulse effect
			addCardPulseEffect(card);
		}
	}

	function animateCounter(element, startValue, endValue, suffix, callback) {
		var duration = 1200; // 1.2 seconds for smoother animation
		var startTime = null;

		function animate(currentTime) {
			if (!startTime) startTime = currentTime;
			var progress = Math.min((currentTime - startTime) / duration, 1);

			// Enhanced easing function for smoother animation
			var easeOutQuart = 1 - Math.pow(1 - progress, 4);
			var currentValue = startValue + (endValue - startValue) * easeOutQuart;

			// Format number with proper decimal places
			var formattedValue = formatNumber(currentValue, suffix);
			element.text(formattedValue + suffix);

			if (progress < 1) {
				requestAnimationFrame(animate);
			} else {
				if (callback) callback();
			}
		}

		requestAnimationFrame(animate);
	}

	function formatNumber(num, suffix) {
		// For product count, use integer formatting
		if (suffix.includes("منتج")) {
			return Math.round(num).toLocaleString();
		}
		
		// For currency, use 2 decimal places
		if (num % 1 === 0) {
			return num.toLocaleString();
		} else {
			return num.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
		}
	}

	function showTrendIndicator(card, oldValue, newValue) {
		var trendIndicator = card.find('.trend-indicator');

		if (newValue > oldValue) {
			trendIndicator.text('📈').css('color', '#4ade80'); // Green for increase
		} else if (newValue < oldValue) {
			trendIndicator.text('📉').css('color', '#f87171'); // Red for decrease
		} else {
			trendIndicator.text('➡️').css('color', '#fbbf24'); // Yellow for no change
		}

		// Enhanced trend indicator animation
		trendIndicator.css('animation', 'none');
		setTimeout(function () {
			trendIndicator.css('animation', 'fadeInUp 0.6s ease');
		}, 10);
	}

	function animateIcon(icon, iconWrapper) {
		// Add updating class for animation
		icon.addClass('updating');
		iconWrapper.addClass('updating');

		// Remove class after animation completes
		setTimeout(function () {
			icon.removeClass('updating');
			iconWrapper.removeClass('updating');
		}, 1000);
	}

	function addDataFlowEffect(card) {
		// Create enhanced data flow particles
		for (var i = 0; i < 5; i++) {
			setTimeout(function () {
				var particle = $('<div class="data-particle"></div>');
				particle.css({
					position: 'absolute',
					width: '6px',
					height: '6px',
					background: 'rgba(255, 255, 255, 0.9)',
					borderRadius: '50%',
					top: '50%',
					left: '20%',
					zIndex: 10,
					animation: 'dataFlow 1.5s ease-out forwards',
					boxShadow: '0 0 8px rgba(255, 255, 255, 0.6)'
				});

				card.append(particle);

				// Remove particle after animation
				setTimeout(function () {
					particle.remove();
				}, 1500);
			}, i * 150);
		}
	}
	
	function addCardPulseEffect(card) {
		// Add a subtle pulse effect to the entire card
		card.addClass('pulse-effect');
		setTimeout(function() {
			card.removeClass('pulse-effect');
		}, 600);
	}
</script>